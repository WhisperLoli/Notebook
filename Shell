shell知识点：
1. 定义变量时，变量名不加美元符号，使用变量时要加美元符号$
   变量命名规则：
     命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。
     中间不能有空格，可以使用下划线（_）。
     不能使用标点符号。
     不能使用bash里的关键字（可用help命令查看保留关键字）
    
2. 变量使用，变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，例如：使用变量a,$a

3. 只读变量
   使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。
   
4. 删除变量
   使用 unset 命令可以删除变量。语法：unset variable_name
   变量被删除后不能再次使用。unset 命令不能删除只读变量。
   
5. 变量类型：
    运行shell时，会同时存在三种变量
    1) 局部变量 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。
    2) 环境变量 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。
    3) shell变量 shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行
    
6. 字符串
    单引号：
      单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；
      单引号字串中不能出现单引号（对单引号使用转义符后也不行）
    双引号：
      双引号里可以有变量
      双引号里可以出现转义字符
     
7. 获取字符串长度
    string="abcd"
    echo ${#string} #输出 4
    
8. 提取子字符串
    以下实例从字符串第 2 个字符开始截取 4 个字符：
    string="runoob is a great site"
    echo ${string:1:4} # 输出 unoo
   
9. 数组
    9.1 Shell 数组
        bash支持一维数组（不支持多维数组），并且没有限定数组的大小。
    
    9.2 定义数组
        在Shell中，用括号来表示数组，数组元素用"空格"符号分割开。
        定义数组的一般形式为：数组名=(值1 值2 ... 值n)
        
        还可以单独定义数组的各个分量：
        array_name[0]=value0
        array_name[1]=value1
        array_name[n]=valuen
        可以不使用连续的下标，而且下标的范围没有限制。
        
    9.3 读取数组
        读取数组元素值的一般格式是：${数组名[下标]}
        例如：valuen=${array_name[n]}
        使用@符号可以获取数组中的所有元素，例如：echo ${array_name[@]}
    9.4 获取数组的长度
        获取数组长度的方法与获取字符串长度的方法相同，例如：
        length=${#array_name[@]}  或者  length=${#array_name[*]}  # 取得数组元素的个数
        lengthn=${#array_name[n]}  # 取得数组单个元素的长度
        
10. 注释
    以"#"开头的行就是注释，会被解释器忽略。
    sh里没有多行注释，只能每一行加一个#号。
    如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？
        每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，
        达到了和注释一样的效果。
        
11. 参数传递
    执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……
    $0为执行的文件名
    参数处理	说明
    $#	传递到脚本的参数个数
    $*	以一个单字符串显示所有向脚本传递的参数。 如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
    $$	脚本运行的当前进程ID号
    $!	后台运行的最后一个进程的ID号
    $@	与$*相同，但是使用时加引号，并在引号中返回每个参数。  如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
    $-	显示Shell使用的当前选项，与set命令功能相同。
    $?	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。
    
    $* 与 $@ 区别：
    相同点：都是引用所有参数。
    不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 "1 2 3"（传递了一个参数），而 "@" 等价于 "1" "2" "3"（传递了三个参数）。
    
    在为shell脚本传递的参数中如果包含空格，应该使用单引号或者双引号将该参数括起来，以便于脚本将这个参数作为整体来接收。
 
12. 基本运算符
   12.1 算数运算符
         两个数相加(注意使用的是反引号 ` 而不是单引号 ')：
         val=`expr 2 + 2`
         echo "两数之和为 : $val"
         ⚠️：加号与两边的操作数有空格，使用2+2是不对的
         
          运算符	  说明	      举例
            +	    加法	`expr $a + $b` 结果为 30。
            -	    减法	`expr $a - $b` 结果为 -10。
            *	    乘法	`expr $a \* $b` 结果为  200。
            /	    除法	`expr $b / $a` 结果为 2。
            %	    取余	`expr $b % $a` 结果为 0。
            =	    赋值	 a=$b 将把变量 b 的值赋给 a。
            ==	  相等   用于比较两个数字，相同则返回 true。	[ $a == $b ] 返回 false。
            !=	  不相等 用于比较两个数字，不相同则返回 true。	[ $a != $b ] 返回 true。
    注意：条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。
    
   12.2  关系运算符
          关系运算符只支持数字，不支持字符串，除非字符串的值是数字。

          下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：
          运算符	           说明	                                       举例
          -eq	    检测两个数是否相等，相等返回 true。	               [ $a -eq $b ] 返回 false。
          -ne	    检测两个数是否相等，不相等返回 true。	              [ $a -ne $b ] 返回 true。
          -gt	    检测左边的数是否大于右边的，如果是，则返回 true。	    [ $a -gt $b ] 返回 false。
          -lt	    检测左边的数是否小于右边的，如果是，则返回 true。	    [ $a -lt $b ] 返回 true。
          -ge	    检测左边的数是否大于等于右边的，如果是，则返回 true。	 [ $a -ge $b ] 返回 false。
          -le	    检测左边的数是否小于等于右边的，如果是，则返回 true。	 [ $a -le $b ] 返回 true。
          
    12.3 布尔运算符
          运算符	 说明	                                                举例
           !	  非运算，表达式为 true 则返回 false，否则返回 true。	[ ! false ] 返回 true。
          -o	  或运算，有一个表达式为 true 则返回 true。	         [ $a -lt 20 -o $b -gt 100 ] 返回 true。
          -a	  与运算，两个表达式都为 true 才返回 true。	         [ $a -lt 20 -a $b -gt 100 ] 返回 false。
          
    12.4 逻辑运算符
          运算符	  说明	                      举例
           &&	  逻辑的 AND	   [[ $a -lt 100 && $b -gt 100 ]] 返回 false
           ||	  逻辑的 OR	   [[ $a -lt 100 || $b -gt 100 ]] 返回 true  
           
    12.5 字符串运算符
          下表列出了常用的字符串运算符，假定变量 a 为 "abc"，变量 b 为 "efg"：

          运算符	                  说明	                        举例
           =	    检测两个字符串是否相等，相等返回 true。	 [ $a = $b ] 返回 false。
          !=	    检测两个字符串是否相等，不相等返回 true。	[ $a != $b ] 返回 true。
          -z	    检测字符串长度是否为0，为0返回 true。	  [ -z $a ] 返回 false。
          -n	    检测字符串长度是否为0，不为0返回 true。	 [ -n $a ] 返回 true。
          str	    检测字符串是否为空，不为空返回 true。	   [ $a ] 返回 true。
    
    12.6 文件测试运算符
          文件测试运算符用于检测 Unix 文件的各种属性。
          属性检测描述如下：
           操作符	 说明	                   举例
            -b     file	        检测文件是否是块设备文件，如果是，则返回 true。	[ -b $file ] 返回 false。
            -c     file	        检测文件是否是字符设备文件，如果是，则返回 true。	[ -c $file ] 返回 false。
            -d     file	        检测文件是否是目录，如果是，则返回 true。	[ -d $file ] 返回 false。
            -f     file	        检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。	[ -f $file ] 返回 true。
            -g     file	        检测文件是否设置了 SGID 位，如果是，则返回 true。	[ -g $file ] 返回 false。
            -k     file	        检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。	[ -k $file ] 返回 false。
            -p     file	        检测文件是否是有名管道，如果是，则返回 true。	[ -p $file ] 返回 false。
            -u     file	        检测文件是否设置了 SUID 位，如果是，则返回 true。	[ -u $file ] 返回 false。
            -r     file	        检测文件是否可读，如果是，则返回 true。	[ -r $file ] 返回 true。
            -w     file	        检测文件是否可写，如果是，则返回 true。	[ -w $file ] 返回 true。
            -x     file	        检测文件是否可执行，如果是，则返回 true。	[ -x $file ] 返回 true。
            -s     file	        检测文件是否为空（文件大小是否大于0），不为空返回 true。	[ -s $file ] 返回 true。
            -e     file	        检测文件（包括目录）是否存在，如果是，则返回 true。
    
13. echo命令
    13.1 显示普通字符串
         echo "123"       # 输出结果 123
    13.2 显示转义字符
         echo "\"123\""   # 输出结果 "123"
    13.3 显示变量
         read name 
         echo "$name It is a test"
         
         [root@www ~]# sh test.sh
          OK                     #标准输入
          OK It is a test        #输出
    13.4 显示换行
         echo -e "OK! \n" # -e 开启转义
         echo "It it a test"
    13.5 显示不换行
         echo -e "OK! \c" # -e 开启转义 \c 不换行
         echo "It is a test"
    13.6 显示结果定向至文件
         echo "It is a test" > myfile
    13.7 显示命令执行结果
         echo `date`
         #结果将显示当前日期  
         2018年 4月24日 星期二 19时03分58秒 CST
         
14. read命令
     read 命令一个一个词组地接收输入的参数，每个词组需要使用空格进行分隔；如果输入的词组个数大于需要的参数个数，
     则多出的词组将被作为整体为最后一个参数接收。
     参数说明：
     -p 输入提示文字
     -n 输入字符长度限制(达到6位，自动结束)
     -t 输入限时
     -s 隐藏输入内容
     read -p "请输入一段文字:" -n 6 -t 5 -s password
     echo "\npassword is $password" 
  
15. printf 命令
     printf 使用引用文本或空格分隔的参数，外面可以在 printf 中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。
     默认 printf 不会像 echo 自动添加换行符，我们可以手动添加 \n。
     printf  format-string  [arguments...]
 
16. 流程控制
    16.1  if 语法
           if condition
           then
               command1 
               command2
               ...
               commandN 
           fi

           写成一行（适用于终端命令提示符）：if [ $(ps -ef | grep -c "ssh") -gt 1 ]; then echo "true"; fi
     16.2  if else 语法
          if condition
          then
              command1 
              command2
              ...
              commandN
          else
              command
          fi
     16.3  if elif else 语法
          if condition1
          then
              command1
          elif condition2 
          then 
              command2
          else
              commandN
          fi
     16.4 for 循环
          for var in item1 item2 ... itemN
          do
              command1
              command2
              ...
              commandN
          done
          
          写成一行：for var in item1 item2 ... itemN; do command1; command2… done;
     16.5 while 循环
          while condition
          do
              command
          done
          
          例：
          int=1
          while(( $int<=5 ))
          do
              echo $int
              let "int++"
          done
     16.6 until 循环
          until condition
          do
              command
          done
     16.7 case
          case 值 in
          模式1)
              command1
              command2
              ...
              commandN
              ;;
          模式2）
              command1
              command2
              ...
              commandN
              ;;
          esac
          
          例：
          echo '输入 1 到 4 之间的数字:'
          echo '你输入的数字为:'
          read aNum
          case $aNum in
              1)  echo '你选择了 1'
              ;;
              2)  echo '你选择了 2'
              ;;
              3)  echo '你选择了 3'
              ;;
              4)  echo '你选择了 4'
              ;;
              *)  echo '你没有输入 1 到 4 之间的数字'
              ;;
          esac
          
          esac（就是case反过来）作为结束标记，每个case分支用右圆括号，用两个分号表示break
     16.8 continue和break

17. 函数
    函数格式
    [ function ] funname [()]{
        action;
        [return int;]
    }
    
    说明：
      1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。
      2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值
    
    在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...  
    $#代表参数总数，$*表示所有参数
    注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n>=10时，需要使用${n}来获取参数
 
18. 输入/输出重定向
    command > file	将输出重定向到 file。  例： echo "hello" > aa.txt 会覆盖aa.txt中原有内容
    command < file	将输入重定向到 file。
    command >> file	将输出以追加的方式重定向到 file。    例： echo "hello" > aa.txt 向aa.txt中追加hello
    n > file	将文件描述符为 n 的文件重定向到 file。
    n >> file	将文件描述符为 n 的文件以追加的方式重定向到 file。
    n >& m	将输出文件 m 和 n 合并。
    n <& m	将输入文件 m 和 n 合并。
    << tag	将开始标记 tag 和结束标记 tag 之间的内容作为输入。
    
19. 文件包含
    . filename   # 注意点号(.)和文件名中间有一空格 或 source filename
    
    示例
    创建两个 shell 脚本文件。

    test1.sh 代码如下：
    url="http://www.runoob.com"
    test2.sh 代码如下：
    #使用 . 号来引用test1.sh 文件
    . ./test1.sh
    # 或者使用以下包含文件代码
    # source ./test1.sh
    echo "$url"
    
